CREATE EXTENSION pg_stat_query_plans;
--
-- simple and compound statements
--
SET pg_stat_query_plans.track_utility = FALSE;
SET pg_stat_query_plans.track_planning = TRUE;
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

SELECT 1 AS "int";
 int 
-----
   1
(1 row)

SELECT 'hello'
  -- multiline
  AS "text";
 text  
-------
 hello
(1 row)

SELECT 'world' AS "text";
 text  
-------
 world
(1 row)

-- transaction
BEGIN;
SELECT 1 AS "int";
 int 
-----
   1
(1 row)

SELECT 'hello' AS "text";
 text  
-------
 hello
(1 row)

COMMIT;
-- compound transaction
BEGIN \;
SELECT 2.0 AS "float" \;
SELECT 'world' AS "text" \;
COMMIT;
 float 
-------
   2.0
(1 row)

 text  
-------
 world
(1 row)

-- compound with empty statements and spurious leading spacing
\;\;   SELECT 3 + 3 \;\;\;   SELECT ' ' || ' !' \;\;   SELECT 1 + 4 \;;
 ?column? 
----------
        6
(1 row)

 ?column? 
----------
   !
(1 row)

 ?column? 
----------
        5
(1 row)

-- non ;-terminated statements
SELECT 1 + 1 + 1 AS "add" \gset
SELECT :add + 1 + 1 AS "add" \;
SELECT :add + 1 + 1 AS "add" \gset
 add 
-----
   5
(1 row)

-- set operator
SELECT 1 AS i UNION SELECT 2 ORDER BY i;
 i 
---
 1
 2
(2 rows)

-- ? operator
select '{"a":1, "b":2}'::jsonb ? 'b';
 ?column? 
----------
 t
(1 row)

-- cte
WITH t(f) AS (
  VALUES (1.0), (2.0)
)
  SELECT f FROM t ORDER BY f;
  f  
-----
 1.0
 2.0
(2 rows)

-- prepared statement with parameter
PREPARE pgqp_test (int) AS SELECT $1, 'test' LIMIT 1;
EXECUTE pgqp_test(1);
 ?column? | ?column? 
----------+----------
        1 | test
(1 row)

DEALLOCATE pgqp_test;
SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                           query                            |                          normalized_plan                          | calls | rows 
------------------------------------------------------------+-------------------------------------------------------------------+-------+------
 PREPARE pgqp_test (int) AS SELECT $1, 'test' LIMIT 1;      | Limit                                                            +|     1 |    1
                                                            |   Output: $1, $2::text                                           +|       | 
                                                            |   ->  Result                                                     +|       | 
                                                            |         Output: $3, $4::text                                     +|       | 
                                                            | Query Identifier: -$5                                             |       | 
 SELECT ' ' || ' !' ;;   SELECT 1 + 4 ;;                    | Result                                                           +|     1 |    1
                                                            |   Output: $1::text                                               +|       | 
                                                            | Query Identifier: $2                                              |       | 
 SELECT 'hello'                                            +| Result                                                           +|     4 |    4
   -- multiline                                            +|   Output: $1::text                                               +|       | 
   AS "text";                                               | Query Identifier: -$2                                             |       | 
 SELECT 1 + 1 + 1 AS "add"                                  | Result                                                           +|     3 |    3
                                                            |   Output: $1Query Identifier: -$2                                 |       | 
 SELECT 1 AS "int";                                         | Result                                                           +|     2 |    2
                                                            |   Output: $1Query Identifier: $2                                  |       | 
 SELECT 1 AS i UNION SELECT 2 ORDER BY i;                   | Unique                                                           +|     1 |    2
                                                            |   Output: ($1)                                                   +|       | 
                                                            |   ->  Sort                                                       +|       | 
                                                            |         Output: ($2)                                             +|       | 
                                                            |         Sort Key: ($3)                                           +|       | 
                                                            |         ->  Append                                               +|       | 
                                                            |               ->  Result                                         +|       | 
                                                            |                     Output: $4->  Result                         +|       | 
                                                            |                     Output: $5Query Identifier: $6                |       | 
 SELECT 2.0 AS "float" ;                                   +| Result                                                           +|     1 |    1
 SELECT 'world' AS "text" ;                                +|   Output: $1Query Identifier: -$2                                 |       | 
 COMMIT;                                                    |                                                                   |       | 
 SELECT 3 + 3 ;;;   SELECT ' ' || ' !' ;;   SELECT 1 + 4 ;; | Result                                                           +|     2 |    2
                                                            |   Output: $1Query Identifier: -$2                                 |       | 
 SELECT pg_stat_query_plans_reset();                        | Result                                                           +|     1 |    1
                                                            |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)+|       | 
                                                            | Query Identifier: -$4                                             |       | 
 WITH t(f) AS (                                            +| Sort                                                             +|     1 |    2
   VALUES (1.0), (2.0)                                     +|   Output: "*VALUES*".column1                                     +|       | 
 )                                                         +|   Sort Key: "*VALUES*".column1                                   +|       | 
   SELECT f FROM t ORDER BY f;                              |   ->  Values Scan on "*VALUES*"                                  +|       | 
                                                            |         Output: "*VALUES*".column1                               +|       | 
                                                            | Query Identifier: $1                                              |       | 
 select '{"a":1, "b":2}'::jsonb ? 'b';                      | Result                                                           +|     1 |    1
                                                            |   Output: true                                                   +|       | 
                                                            | Query Identifier: $1                                              |       | 
(11 rows)

--
-- CRUD: INSERT SELECT UPDATE DELETE on test table
--
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

-- utility "create table" should not be shown
CREATE TEMP TABLE test (a int, b char(20));
INSERT INTO test VALUES(generate_series(1, 10), 'aaa');
UPDATE test SET b = 'bbb' WHERE a > 7;
DELETE FROM test WHERE a > 9;
-- explicit transaction
BEGIN;
UPDATE test SET b = '111' WHERE a = 1 ;
COMMIT;
BEGIN \;
UPDATE test SET b = '222' WHERE a = 2 \;
COMMIT ;
UPDATE test SET b = '333' WHERE a = 3 \;
UPDATE test SET b = '444' WHERE a = 4 ;
BEGIN \;
UPDATE test SET b = '555' WHERE a = 5 \;
UPDATE test SET b = '666' WHERE a = 6 \;
COMMIT ;
-- many INSERT values
INSERT INTO test (a, b) VALUES (1, 'a'), (2, 'b'), (3, 'c');
-- SELECT with constants
SELECT * FROM test WHERE a > 5 ORDER BY a ;
 a |          b           
---+----------------------
 6 | 666                 
 7 | aaa                 
 8 | bbb                 
 9 | bbb                 
(4 rows)

SELECT *
  FROM test
  WHERE a > 9
  ORDER BY a ;
 a | b 
---+---
(0 rows)

-- SELECT without constants
SELECT * FROM test ORDER BY a;
 a |          b           
---+----------------------
 1 | a                   
 1 | 111                 
 2 | b                   
 2 | 222                 
 3 | c                   
 3 | 333                 
 4 | 444                 
 5 | 555                 
 6 | 666                 
 7 | aaa                 
 8 | bbb                 
 9 | bbb                 
(12 rows)

-- SELECT with IN clause
SELECT * FROM test WHERE a IN (1, 2, 3, 4, 5);
 a |          b           
---+----------------------
 1 | 111                 
 2 | 222                 
 3 | 333                 
 4 | 444                 
 5 | 555                 
 1 | a                   
 2 | b                   
 3 | c                   
(8 rows)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                            query                             |                          normalized_plan                          | calls | rows 
--------------------------------------------------------------+-------------------------------------------------------------------+-------+------
 DELETE FROM test WHERE a > 9;                                | Delete on pg_temp.test                                           +|     1 |    1
                                                              |   ->  Seq Scan on pg_temp.test                                   +|       | 
                                                              |         Output: ctid                                             +|       | 
                                                              |         Filter: (test.a > $1)                                    +|       | 
                                                              | Query Identifier: $2                                              |       | 
 INSERT INTO test (a, b) VALUES (1, 'a'), (2, 'b'), (3, 'c'); | Insert on pg_temp.test                                           +|     1 |    3
                                                              |   ->  Values Scan on "*VALUES*"                                  +|       | 
                                                              |         Output: "*VALUES*".column1, "*VALUES*".column2           +|       | 
                                                              | Query Identifier: $1                                              |       | 
 INSERT INTO test VALUES(generate_series(1, 10), 'aaa');      | Insert on pg_temp.test                                           +|     1 |   10
                                                              |   ->  ProjectSet                                                 +|       | 
                                                              |         Output: generate_series($1, $2), $3::character($4)       +|       | 
                                                              |         ->  Result                                               +|       | 
                                                              | Query Identifier: $5                                              |       | 
 SELECT * FROM test ORDER BY a;                               | Sort                                                             +|     1 |   12
                                                              |   Output: a, b                                                   +|       | 
                                                              |   Sort Key: test.a                                               +|       | 
                                                              |   ->  Seq Scan on pg_temp.test                                   +|       | 
                                                              |         Output: a, b                                             +|       | 
                                                              | Query Identifier: -$1                                             |       | 
 SELECT * FROM test WHERE a > 5 ORDER BY a ;                  | Sort                                                             +|     2 |    4
                                                              |   Output: a, b                                                   +|       | 
                                                              |   Sort Key: test.a                                               +|       | 
                                                              |   ->  Seq Scan on pg_temp.test                                   +|       | 
                                                              |         Output: a, b                                             +|       | 
                                                              |         Filter: (test.a > $1)                                    +|       | 
                                                              | Query Identifier: $2                                              |       | 
 SELECT * FROM test WHERE a IN (1, 2, 3, 4, 5);               | Seq Scan on pg_temp.test                                         +|     1 |    8
                                                              |   Output: a, b                                                   +|       | 
                                                              |   Filter: (test.a = ANY ($1::integer[]))                         +|       | 
                                                              | Query Identifier: $2                                              |       | 
 SELECT pg_stat_query_plans_reset();                          | Result                                                           +|     1 |    1
                                                              |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)+|       | 
                                                              | Query Identifier: -$4                                             |       | 
 UPDATE test SET b = '111' WHERE a = 1 ;                      | Update on pg_temp.test                                           +|     6 |    6
                                                              |   ->  Seq Scan on pg_temp.test                                   +|       | 
                                                              |         Output: $1::character($2), ctid                          +|       | 
                                                              |         Filter: (test.a = $3)                                    +|       | 
                                                              | Query Identifier: -$4                                             |       | 
 UPDATE test SET b = 'bbb' WHERE a > 7;                       | Update on pg_temp.test                                           +|     1 |    3
                                                              |   ->  Seq Scan on pg_temp.test                                   +|       | 
                                                              |         Output: $1::character($2), ctid                          +|       | 
                                                              |         Filter: (test.a > $3)                                    +|       | 
                                                              | Query Identifier: -$4                                             |       | 
(9 rows)

--
-- pg_stat_query_plans.track = none
--
SET pg_stat_query_plans.track = 'none';
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

SELECT 1 AS "one";
 one 
-----
   1
(1 row)

SELECT 1 + 1 AS "two";
 two 
-----
   2
(1 row)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
 query | normalized_plan | calls | rows 
-------+-----------------+-------+------
(0 rows)

--
-- pg_stat_query_plans.track = top
--
SET pg_stat_query_plans.track = 'top';
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

DO LANGUAGE plpgsql $$
BEGIN
  -- this is a SELECT
  PERFORM 'hello world'::TEXT;
END;
$$;
-- PL/pgSQL function
CREATE FUNCTION PLUS_TWO(i INTEGER) RETURNS INTEGER AS $$
DECLARE
  r INTEGER;
BEGIN
  SELECT (i + 1 + 1.0)::INTEGER INTO r;
  RETURN r;
END; $$ LANGUAGE plpgsql;
SELECT PLUS_TWO(3);
 plus_two 
----------
        5
(1 row)

SELECT PLUS_TWO(7);
 plus_two 
----------
        9
(1 row)

-- SQL function --- use LIMIT to keep it from being inlined
CREATE FUNCTION PLUS_ONE(i INTEGER) RETURNS INTEGER AS
$$ SELECT (i + 1.0)::INTEGER LIMIT 1 $$ LANGUAGE SQL;
SELECT PLUS_ONE(8);
 plus_one 
----------
        9
(1 row)

SELECT PLUS_ONE(10);
 plus_one 
----------
       11
(1 row)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                query                |                          normalized_plan                          | calls | rows 
-------------------------------------+-------------------------------------------------------------------+-------+------
 SELECT 'hello world'::TEXT          | Result                                                           +|     1 |    1
                                     |   Output: $1::text                                               +|       | 
                                     | Query Identifier: -$2                                             |       | 
 SELECT PLUS_ONE(8);                 | Result                                                           +|     2 |    2
                                     |   Output: plus_one($1)                                           +|       | 
                                     | Query Identifier: $2                                              |       | 
 SELECT PLUS_TWO(3);                 | Result                                                           +|     2 |    2
                                     |   Output: plus_two($1)                                           +|       | 
                                     | Query Identifier: $2                                              |       | 
 SELECT pg_stat_query_plans_reset(); | Result                                                           +|     1 |    1
                                     |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)+|       | 
                                     | Query Identifier: -$4                                             |       | 
(4 rows)

--
-- pg_stat_query_plans.track = all
--
SET pg_stat_query_plans.track = 'all';
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

-- we drop and recreate the functions to avoid any caching funnies
DROP FUNCTION PLUS_ONE(INTEGER);
DROP FUNCTION PLUS_TWO(INTEGER);
-- PL/pgSQL function
CREATE FUNCTION PLUS_TWO(i INTEGER) RETURNS INTEGER AS $$
DECLARE
  r INTEGER;
BEGIN
  SELECT (i + 1 + 1.0)::INTEGER INTO r;
  RETURN r;
END; $$ LANGUAGE plpgsql;
SELECT PLUS_TWO(-1);
 plus_two 
----------
        1
(1 row)

SELECT PLUS_TWO(2);
 plus_two 
----------
        4
(1 row)

-- SQL function --- use LIMIT to keep it from being inlined
CREATE FUNCTION PLUS_ONE(i INTEGER) RETURNS INTEGER AS
$$ SELECT (i + 1.0)::INTEGER LIMIT 1 $$ LANGUAGE SQL;
SELECT PLUS_ONE(3);
 plus_one 
----------
        4
(1 row)

SELECT PLUS_ONE(1);
 plus_one 
----------
        2
(1 row)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                query                |                          normalized_plan                          | calls | rows 
-------------------------------------+-------------------------------------------------------------------+-------+------
 SELECT (i + 1 + 1.0)::INTEGER       | Result                                                           +|     2 |    2
                                     |   Output: $1Query Identifier: -$2                                 |       | 
 SELECT (i + 1.0)::INTEGER LIMIT 1   | Limit                                                            +|     2 |    2
                                     |   Output: (((($1)::numeric + $1))::integer)                      +|       | 
                                     |   ->  Result                                                     +|       | 
                                     |         Output: ((($1)::numeric + $2))::integer                  +|       | 
                                     | Query Identifier: -$3                                             |       | 
 SELECT PLUS_ONE(3);                 | Result                                                           +|     2 |    2
                                     |   Output: plus_one($1)                                           +|       | 
                                     | Query Identifier: -$2                                             |       | 
 SELECT PLUS_TWO(-1);                | Result                                                           +|     1 |    1
                                     |   Output: plus_two($1::integer)                                  +|       | 
                                     | Query Identifier: $2                                              |       | 
 SELECT PLUS_TWO(2);                 | Result                                                           +|     1 |    1
                                     |   Output: plus_two($1)                                           +|       | 
                                     | Query Identifier: $2                                              |       | 
 SELECT pg_stat_query_plans_reset(); | Result                                                           +|     1 |    1
                                     |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)+|       | 
                                     | Query Identifier: -$4                                             |       | 
(6 rows)

--
-- queries with locking clauses
--
CREATE TABLE pgqp_a (id integer PRIMARY KEY);
CREATE TABLE pgqp_b (id integer PRIMARY KEY, a_id integer REFERENCES pgqp_a);
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

-- control query
SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id;
 id | id | a_id 
----+----+------
(0 rows)

-- test range tables
SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE;
 id | id | a_id 
----+----+------
(0 rows)

SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE OF pgqp_a;
 id | id | a_id 
----+----+------
(0 rows)

SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE OF pgqp_b;
 id | id | a_id 
----+----+------
(0 rows)

SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE OF pgqp_a, pgqp_b; -- matches plain "FOR UPDATE"
 id | id | a_id 
----+----+------
(0 rows)

SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE OF pgqp_b, pgqp_a;
 id | id | a_id 
----+----+------
(0 rows)

-- test strengths
SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR NO KEY UPDATE;
 id | id | a_id 
----+----+------
(0 rows)

SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR SHARE;
 id | id | a_id 
----+----+------
(0 rows)

SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR KEY SHARE;
 id | id | a_id 
----+----+------
(0 rows)

-- test wait policies
SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE NOWAIT;
 id | id | a_id 
----+----+------
(0 rows)

SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE SKIP LOCKED;
 id | id | a_id 
----+----+------
(0 rows)

SELECT calls, planid, normalized_plan, query FROM pg_stat_query_plans ORDER BY query COLLATE "C";
 calls |        planid        |                               normalized_plan                               |                                           query                                           
-------+----------------------+-----------------------------------------------------------------------------+-------------------------------------------------------------------------------------------
     1 | -2402585108552408733 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR KEY SHARE;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: $1                                                        | 
     1 |  5953087678102897204 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR NO KEY UPDATE;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: -$1                                                       | 
     1 |  5953087678102897204 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR SHARE;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: -$1                                                       | 
     1 |  5953087678102897204 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE NOWAIT;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: -$1                                                       | 
     1 | -2402585108552408733 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE OF pgqp_a;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: $1                                                        | 
     1 | -5205424379103719585 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE OF pgqp_b, pgqp_a;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid, pgqp_a.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid, pgqp_a.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: -$1                                                       | 
     1 |  6950240804931183197 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE OF pgqp_b;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid, pgqp_a.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid, pgqp_a.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: $1                                                        | 
     1 | -2402585108552408733 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE SKIP LOCKED;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: $1                                                        | 
     2 | -2402585108552408733 | LockRows                                                                   +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id FOR UPDATE;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid      +| 
       |                      |   ->  Hash Join                                                            +| 
       |                      |         Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id, pgqp_a.ctid, pgqp_b.ctid+| 
       |                      |         Inner Unique: true                                                 +| 
       |                      |         Hash Cond: (pgqp_b.a_id = pgqp_a.id)                               +| 
       |                      |         ->  Seq Scan on public.pgqp_b                                      +| 
       |                      |               Output: pgqp_b.id, pgqp_b.a_id, pgqp_b.ctid                  +| 
       |                      |         ->  Hash                                                           +| 
       |                      |               Output: pgqp_a.id, pgqp_a.ctid                               +| 
       |                      |               ->  Seq Scan on public.pgqp_a                                +| 
       |                      |                     Output: pgqp_a.id, pgqp_a.ctid                         +| 
       |                      | Query Identifier: $1                                                        | 
     1 | -2653678848630551659 | Hash Join                                                                  +| SELECT * FROM pgqp_a JOIN pgqp_b ON pgqp_b.a_id = pgqp_a.id;
       |                      |   Output: pgqp_a.id, pgqp_b.id, pgqp_b.a_id                                +| 
       |                      |   Inner Unique: true                                                       +| 
       |                      |   Hash Cond: (pgqp_b.a_id = pgqp_a.id)                                     +| 
       |                      |   ->  Seq Scan on public.pgqp_b                                            +| 
       |                      |         Output: pgqp_b.id, pgqp_b.a_id                                     +| 
       |                      |   ->  Hash                                                                 +| 
       |                      |         Output: pgqp_a.id                                                  +| 
       |                      |         ->  Seq Scan on public.pgqp_a                                      +| 
       |                      |               Output: pgqp_a.id                                            +| 
       |                      | Query Identifier: $1                                                        | 
     1 |  3681815378424448864 | Result                                                                     +| SELECT pg_stat_query_plans_reset();
       |                      |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)          +| 
       |                      | Query Identifier: -$4                                                       | 
(11 rows)

DROP TABLE pgqp_a, pgqp_b CASCADE;
--
-- utility commands
--
SET pg_stat_query_plans.track_utility = TRUE;
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

SELECT 1;
 ?column? 
----------
        1
(1 row)

-- all functions below do not have plan so must not be shown in plans view
CREATE INDEX test_b ON test(b);
DROP TABLE test \;
DROP TABLE IF EXISTS test \;
DROP FUNCTION PLUS_ONE(INTEGER);
DROP TABLE IF EXISTS test \;
DROP TABLE IF EXISTS test \;
DROP FUNCTION IF EXISTS PLUS_ONE(INTEGER);
NOTICE:  table "test" does not exist, skipping
NOTICE:  table "test" does not exist, skipping
NOTICE:  function plus_one(pg_catalog.int4) does not exist, skipping
DROP FUNCTION PLUS_TWO(INTEGER);
SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                query                |                          normalized_plan                          | calls | rows 
-------------------------------------+-------------------------------------------------------------------+-------+------
 SELECT 1;                           | Result                                                           +|     1 |    1
                                     |   Output: $1Query Identifier: $2                                  |       | 
 SELECT pg_stat_query_plans_reset(); | Result                                                           +|     1 |    1
                                     |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)+|       | 
                                     | Query Identifier: -$4                                             |       | 
(2 rows)

--
-- Track user activity and reset them
--
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

CREATE ROLE regress_stats_user1;
CREATE ROLE regress_stats_user2;
SET ROLE regress_stats_user1;
SELECT 1 AS "ONE";
 ONE 
-----
   1
(1 row)

SELECT 1+1 AS "TWO";
 TWO 
-----
   2
(1 row)

RESET ROLE;
SET ROLE regress_stats_user2;
SELECT 1 AS "ONE";
 ONE 
-----
   1
(1 row)

SELECT 1+1 AS "TWO";
 TWO 
-----
   2
(1 row)

RESET ROLE;
SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                query                |                          normalized_plan                          | calls | rows 
-------------------------------------+-------------------------------------------------------------------+-------+------
 SELECT 1 AS "ONE";                  | Result                                                           +|     1 |    1
                                     |   Output: $1Query Identifier: $2                                  |       | 
 SELECT 1 AS "ONE";                  | Result                                                           +|     1 |    1
                                     |   Output: $1Query Identifier: $2                                  |       | 
 SELECT 1+1 AS "TWO";                | Result                                                           +|     1 |    1
                                     |   Output: $1Query Identifier: -$2                                 |       | 
 SELECT 1+1 AS "TWO";                | Result                                                           +|     1 |    1
                                     |   Output: $1Query Identifier: -$2                                 |       | 
 SELECT pg_stat_query_plans_reset(); | Result                                                           +|     1 |    1
                                     |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)+|       | 
                                     | Query Identifier: -$4                                             |       | 
(5 rows)

--
-- Don't reset anything if any of the parameter is NULL
--
SELECT pg_stat_query_plans_reset(NULL);
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                                              query                                              |                                                                          normalized_plan                                                                           | calls | rows 
-------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------+------
 SELECT 1 AS "ONE";                                                                              | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: $2                                                                                                                                   |       | 
 SELECT 1 AS "ONE";                                                                              | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: $2                                                                                                                                   |       | 
 SELECT 1+1 AS "TWO";                                                                            | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: -$2                                                                                                                                  |       | 
 SELECT 1+1 AS "TWO";                                                                            | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: -$2                                                                                                                                  |       | 
 SELECT pg_stat_query_plans_reset();                                                             | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)                                                                                                 +|       | 
                                                                                                 | Query Identifier: -$4                                                                                                                                              |       | 
 SELECT pg_stat_query_plans_reset(NULL);                                                         | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: NULL::void                                                                                                                                              +|       | 
                                                                                                 | Query Identifier: $1                                                                                                                                               |       | 
 SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C"; | Sort                                                                                                                                                              +|     1 |    5
                                                                                                 |   Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, ((pg_stat_query_plans.query)::text)+|       | 
                                                                                                 |   Sort Key: pg_stat_query_plans.query COLLATE "C"                                                                                                                 +|       | 
                                                                                                 |   ->  Function Scan on public.pg_stat_query_plans                                                                                                                 +|       | 
                                                                                                 |         Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, pg_stat_query_plans.query    +|       | 
                                                                                                 |         Function Call: pg_stat_query_plans(true)                                                                                                                  +|       | 
                                                                                                 | Query Identifier: -$1                                                                                                                                              |       | 
(7 rows)

--
-- remove query ('SELECT $1+$2 AS "TWO"') executed by regress_stats_user2
-- in the current_database
--
SELECT pg_stat_query_plans_reset(
	(SELECT r.oid FROM pg_roles AS r WHERE r.rolname = 'regress_stats_user2'),
	(SELECT d.oid FROM pg_database As d where datname = current_database()),
	(SELECT s.queryid FROM pg_stat_query_plans_sql AS s
				WHERE s.query = 'SELECT $1+$2 AS "TWO"' LIMIT 1));
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                                              query                                              |                                                                          normalized_plan                                                                           | calls | rows 
-------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------+------
 SELECT 1 AS "ONE";                                                                              | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: $2                                                                                                                                   |       | 
 SELECT 1 AS "ONE";                                                                              | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: $2                                                                                                                                   |       | 
 SELECT 1+1 AS "TWO";                                                                            | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: -$2                                                                                                                                  |       | 
 SELECT pg_stat_query_plans_reset(                                                              +| Result                                                                                                                                                            +|     1 |    1
         (SELECT r.oid FROM pg_roles AS r WHERE r.rolname = 'regress_stats_user2'),             +|   Output: pg_stat_query_plans_reset($0, $1, $2)                                                                                                                   +|       | 
         (SELECT d.oid FROM pg_database As d where datname = current_database()),               +|   InitPlan $1(returns $0)                                                                                                                                         +|       | 
         (SELECT s.queryid FROM pg_stat_query_plans_sql AS s                                    +|     ->  Seq Scan on pg_catalog.pg_authid                                                                                                                          +|       | 
                                 WHERE s.query = 'SELECT $1+$2 AS "TWO"' LIMIT 1));              |           Output: pg_authid.oid                                                                                                                                   +|       | 
                                                                                                 |           Filter: (pg_authid.rolname = $2::name)                                                                                                                  +|       | 
                                                                                                 |   InitPlan $3(returns $1)                                                                                                                                         +|       | 
                                                                                                 |     ->  Seq Scan on pg_catalog.pg_database d                                                                                                                      +|       | 
                                                                                                 |           Output: d.oid                                                                                                                                           +|       | 
                                                                                                 |           Filter: (d.datname = current_database())                                                                                                                +|       | 
                                                                                                 |   InitPlan $4(returns $2)                                                                                                                                         +|       | 
                                                                                                 |     ->  Limit                                                                                                                                                     +|       | 
                                                                                                 |           Output: pg_stat_query_plans_sql.queryid                                                                                                                 +|       | 
                                                                                                 |           ->  Function Scan on public.pg_stat_query_plans_sql                                                                                                     +|       | 
                                                                                                 |                 Output: pg_stat_query_plans_sql.queryid                                                                                                           +|       | 
                                                                                                 |                 Function Call: pg_stat_query_plans_sql(true)                                                                                                      +|       | 
                                                                                                 |                 Filter: (pg_stat_query_plans_sql.query = $5::text)                                                                                                +|       | 
                                                                                                 | Query Identifier: $6                                                                                                                                               |       | 
 SELECT pg_stat_query_plans_reset();                                                             | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)                                                                                                 +|       | 
                                                                                                 | Query Identifier: -$4                                                                                                                                              |       | 
 SELECT pg_stat_query_plans_reset(NULL);                                                         | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: NULL::void                                                                                                                                              +|       | 
                                                                                                 | Query Identifier: $1                                                                                                                                               |       | 
 SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C"; | Sort                                                                                                                                                              +|     2 |   12
                                                                                                 |   Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, ((pg_stat_query_plans.query)::text)+|       | 
                                                                                                 |   Sort Key: pg_stat_query_plans.query COLLATE "C"                                                                                                                 +|       | 
                                                                                                 |   ->  Function Scan on public.pg_stat_query_plans                                                                                                                 +|       | 
                                                                                                 |         Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, pg_stat_query_plans.query    +|       | 
                                                                                                 |         Function Call: pg_stat_query_plans(true)                                                                                                                  +|       | 
                                                                                                 | Query Identifier: -$1                                                                                                                                              |       | 
(7 rows)

--
-- remove query ('SELECT $1 AS "ONE"') executed by two users
--
SELECT pg_stat_query_plans_reset(0,0,s.queryid)
	FROM pg_stat_query_plans_sql AS s WHERE s.query = 'SELECT $1 AS "ONE"';
 pg_stat_query_plans_reset 
---------------------------
 
 
(2 rows)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                                              query                                              |                                                                          normalized_plan                                                                           | calls | rows 
-------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------+------
 SELECT 1+1 AS "TWO";                                                                            | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: $1Query Identifier: -$2                                                                                                                                  |       | 
 SELECT pg_stat_query_plans_reset(                                                              +| Result                                                                                                                                                            +|     1 |    1
         (SELECT r.oid FROM pg_roles AS r WHERE r.rolname = 'regress_stats_user2'),             +|   Output: pg_stat_query_plans_reset($0, $1, $2)                                                                                                                   +|       | 
         (SELECT d.oid FROM pg_database As d where datname = current_database()),               +|   InitPlan $1(returns $0)                                                                                                                                         +|       | 
         (SELECT s.queryid FROM pg_stat_query_plans_sql AS s                                    +|     ->  Seq Scan on pg_catalog.pg_authid                                                                                                                          +|       | 
                                 WHERE s.query = 'SELECT $1+$2 AS "TWO"' LIMIT 1));              |           Output: pg_authid.oid                                                                                                                                   +|       | 
                                                                                                 |           Filter: (pg_authid.rolname = $2::name)                                                                                                                  +|       | 
                                                                                                 |   InitPlan $3(returns $1)                                                                                                                                         +|       | 
                                                                                                 |     ->  Seq Scan on pg_catalog.pg_database d                                                                                                                      +|       | 
                                                                                                 |           Output: d.oid                                                                                                                                           +|       | 
                                                                                                 |           Filter: (d.datname = current_database())                                                                                                                +|       | 
                                                                                                 |   InitPlan $4(returns $2)                                                                                                                                         +|       | 
                                                                                                 |     ->  Limit                                                                                                                                                     +|       | 
                                                                                                 |           Output: pg_stat_query_plans_sql.queryid                                                                                                                 +|       | 
                                                                                                 |           ->  Function Scan on public.pg_stat_query_plans_sql                                                                                                     +|       | 
                                                                                                 |                 Output: pg_stat_query_plans_sql.queryid                                                                                                           +|       | 
                                                                                                 |                 Function Call: pg_stat_query_plans_sql(true)                                                                                                      +|       | 
                                                                                                 |                 Filter: (pg_stat_query_plans_sql.query = $5::text)                                                                                                +|       | 
                                                                                                 | Query Identifier: $6                                                                                                                                               |       | 
 SELECT pg_stat_query_plans_reset();                                                             | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)                                                                                                 +|       | 
                                                                                                 | Query Identifier: -$4                                                                                                                                              |       | 
 SELECT pg_stat_query_plans_reset(0,0,s.queryid)                                                +| Function Scan on public.pg_stat_query_plans_sql                                                                                                                   +|     1 |    2
         FROM pg_stat_query_plans_sql AS s WHERE s.query = 'SELECT $1 AS "ONE"';                 |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, pg_stat_query_plans_sql.queryid)                                                                            +|       | 
                                                                                                 |   Function Call: pg_stat_query_plans_sql(true)                                                                                                                    +|       | 
                                                                                                 |   Filter: (pg_stat_query_plans_sql.query = $3::text)                                                                                                              +|       | 
                                                                                                 | Query Identifier: $4                                                                                                                                               |       | 
 SELECT pg_stat_query_plans_reset(NULL);                                                         | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: NULL::void                                                                                                                                              +|       | 
                                                                                                 | Query Identifier: $1                                                                                                                                               |       | 
 SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C"; | Sort                                                                                                                                                              +|     3 |   19
                                                                                                 |   Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, ((pg_stat_query_plans.query)::text)+|       | 
                                                                                                 |   Sort Key: pg_stat_query_plans.query COLLATE "C"                                                                                                                 +|       | 
                                                                                                 |   ->  Function Scan on public.pg_stat_query_plans                                                                                                                 +|       | 
                                                                                                 |         Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, pg_stat_query_plans.query    +|       | 
                                                                                                 |         Function Call: pg_stat_query_plans(true)                                                                                                                  +|       | 
                                                                                                 | Query Identifier: -$1                                                                                                                                              |       | 
(6 rows)

--
-- remove query of a user (regress_stats_user1)
--
SELECT pg_stat_query_plans_reset(r.oid)
		FROM pg_roles AS r WHERE r.rolname = 'regress_stats_user1';
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                                              query                                              |                                                                          normalized_plan                                                                           | calls | rows 
-------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------+------
 SELECT pg_stat_query_plans_reset(                                                              +| Result                                                                                                                                                            +|     1 |    1
         (SELECT r.oid FROM pg_roles AS r WHERE r.rolname = 'regress_stats_user2'),             +|   Output: pg_stat_query_plans_reset($0, $1, $2)                                                                                                                   +|       | 
         (SELECT d.oid FROM pg_database As d where datname = current_database()),               +|   InitPlan $1(returns $0)                                                                                                                                         +|       | 
         (SELECT s.queryid FROM pg_stat_query_plans_sql AS s                                    +|     ->  Seq Scan on pg_catalog.pg_authid                                                                                                                          +|       | 
                                 WHERE s.query = 'SELECT $1+$2 AS "TWO"' LIMIT 1));              |           Output: pg_authid.oid                                                                                                                                   +|       | 
                                                                                                 |           Filter: (pg_authid.rolname = $2::name)                                                                                                                  +|       | 
                                                                                                 |   InitPlan $3(returns $1)                                                                                                                                         +|       | 
                                                                                                 |     ->  Seq Scan on pg_catalog.pg_database d                                                                                                                      +|       | 
                                                                                                 |           Output: d.oid                                                                                                                                           +|       | 
                                                                                                 |           Filter: (d.datname = current_database())                                                                                                                +|       | 
                                                                                                 |   InitPlan $4(returns $2)                                                                                                                                         +|       | 
                                                                                                 |     ->  Limit                                                                                                                                                     +|       | 
                                                                                                 |           Output: pg_stat_query_plans_sql.queryid                                                                                                                 +|       | 
                                                                                                 |           ->  Function Scan on public.pg_stat_query_plans_sql                                                                                                     +|       | 
                                                                                                 |                 Output: pg_stat_query_plans_sql.queryid                                                                                                           +|       | 
                                                                                                 |                 Function Call: pg_stat_query_plans_sql(true)                                                                                                      +|       | 
                                                                                                 |                 Filter: (pg_stat_query_plans_sql.query = $5::text)                                                                                                +|       | 
                                                                                                 | Query Identifier: $6                                                                                                                                               |       | 
 SELECT pg_stat_query_plans_reset();                                                             | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)                                                                                                 +|       | 
                                                                                                 | Query Identifier: -$4                                                                                                                                              |       | 
 SELECT pg_stat_query_plans_reset(0,0,s.queryid)                                                +| Function Scan on public.pg_stat_query_plans_sql                                                                                                                   +|     1 |    2
         FROM pg_stat_query_plans_sql AS s WHERE s.query = 'SELECT $1 AS "ONE"';                 |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, pg_stat_query_plans_sql.queryid)                                                                            +|       | 
                                                                                                 |   Function Call: pg_stat_query_plans_sql(true)                                                                                                                    +|       | 
                                                                                                 |   Filter: (pg_stat_query_plans_sql.query = $3::text)                                                                                                              +|       | 
                                                                                                 | Query Identifier: $4                                                                                                                                               |       | 
 SELECT pg_stat_query_plans_reset(NULL);                                                         | Result                                                                                                                                                            +|     1 |    1
                                                                                                 |   Output: NULL::void                                                                                                                                              +|       | 
                                                                                                 | Query Identifier: $1                                                                                                                                               |       | 
 SELECT pg_stat_query_plans_reset(r.oid)                                                        +| Seq Scan on pg_catalog.pg_authid                                                                                                                                  +|     1 |    1
                 FROM pg_roles AS r WHERE r.rolname = 'regress_stats_user1';                     |   Output: pg_stat_query_plans_reset(pg_authid.oid, $1::oid, $2::bigint)                                                                                           +|       | 
                                                                                                 |   Filter: (pg_authid.rolname = $3::name)                                                                                                                          +|       | 
                                                                                                 | Query Identifier: $4                                                                                                                                               |       | 
 SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C"; | Sort                                                                                                                                                              +|     4 |   25
                                                                                                 |   Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, ((pg_stat_query_plans.query)::text)+|       | 
                                                                                                 |   Sort Key: pg_stat_query_plans.query COLLATE "C"                                                                                                                 +|       | 
                                                                                                 |   ->  Function Scan on public.pg_stat_query_plans                                                                                                                 +|       | 
                                                                                                 |         Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.calls, pg_stat_query_plans.rows, pg_stat_query_plans.query    +|       | 
                                                                                                 |         Function Call: pg_stat_query_plans(true)                                                                                                                  +|       | 
                                                                                                 | Query Identifier: -$1                                                                                                                                              |       | 
(6 rows)

--
-- reset all
--
SELECT pg_stat_query_plans_reset(0,0,0);
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

SELECT query, normalized_plan, calls, rows FROM pg_stat_query_plans ORDER BY query COLLATE "C";
                  query                   |                          normalized_plan                          | calls | rows 
------------------------------------------+-------------------------------------------------------------------+-------+------
 SELECT pg_stat_query_plans_reset(0,0,0); | Result                                                           +|     1 |    1
                                          |   Output: pg_stat_query_plans_reset($1::oid, $2::oid, $3::bigint)+|       | 
                                          | Query Identifier: $4                                              |       | 
(1 row)

--
-- cleanup
--
DROP ROLE regress_stats_user1;
DROP ROLE regress_stats_user2;
--
-- top level handling
--
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

CREATE TABLE test ();
ALTER TABLE test ADD COLUMN x int;
SET pg_stat_query_plans.track = 'top';
DELETE FROM test;
DO $$
BEGIN
    DELETE FROM test;
END;
$$ LANGUAGE plpgsql;
SELECT query, normalized_plan, toplevel, calls FROM
pg_stat_query_plans WHERE query LIKE '%DELETE%' ORDER BY query COLLATE "C", toplevel;
       query       |        normalized_plan        | toplevel | calls 
-------------------+-------------------------------+----------+-------
 DELETE FROM test; | Delete on public.test        +| t        |     1
                   |   ->  Seq Scan on public.test+|          | 
                   |         Output: ctid         +|          | 
                   | Query Identifier: -$1         |          | 
(1 row)

SET pg_stat_query_plans.track = 'all';
DELETE FROM test;
DO $$
BEGIN
    DELETE FROM test;
END;
$$ LANGUAGE plpgsql;
SELECT query, normalized_plan, toplevel, calls FROM
pg_stat_query_plans WHERE query LIKE '%DELETE%' ORDER BY query COLLATE "C", toplevel;
                                         query                                         |                                                                            normalized_plan                                                                             | toplevel | calls 
---------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------+-------
 DELETE FROM test;                                                                     | Delete on public.test                                                                                                                                                 +| f        |     1
                                                                                       |   ->  Seq Scan on public.test                                                                                                                                         +|          | 
                                                                                       |         Output: ctid                                                                                                                                                  +|          | 
                                                                                       | Query Identifier: -$1                                                                                                                                                  |          | 
 DELETE FROM test;                                                                     | Delete on public.test                                                                                                                                                 +| t        |     2
                                                                                       |   ->  Seq Scan on public.test                                                                                                                                         +|          | 
                                                                                       |         Output: ctid                                                                                                                                                  +|          | 
                                                                                       | Query Identifier: -$1                                                                                                                                                  |          | 
 SELECT query, normalized_plan, toplevel, calls FROM                                  +| Sort                                                                                                                                                                  +| t        |     1
 pg_stat_query_plans WHERE query LIKE '%DELETE%' ORDER BY query COLLATE "C", toplevel; |   Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.toplevel, pg_stat_query_plans.calls, ((pg_stat_query_plans.query)::text)+|          | 
                                                                                       |   Sort Key: pg_stat_query_plans.query COLLATE "C", pg_stat_query_plans.toplevel                                                                                       +|          | 
                                                                                       |   ->  Function Scan on public.pg_stat_query_plans                                                                                                                     +|          | 
                                                                                       |         Output: pg_stat_query_plans.query, pg_stat_query_plans.normalized_plan, pg_stat_query_plans.toplevel, pg_stat_query_plans.calls, pg_stat_query_plans.query    +|          | 
                                                                                       |         Function Call: pg_stat_query_plans(true)                                                                                                                      +|          | 
                                                                                       |         Filter: (pg_stat_query_plans.query ~~ $1::text)                                                                                                               +|          | 
                                                                                       | Query Identifier: $2                                                                                                                                                   |          | 
(3 rows)

DROP TABLE IF EXISTS test \;
SELECT pg_stat_query_plans_reset();
 pg_stat_query_plans_reset 
---------------------------
 
(1 row)

-- FROM [ONLY]
CREATE TABLE tbl_inh(id integer);
CREATE TABLE tbl_inh_1() INHERITS (tbl_inh);
INSERT INTO tbl_inh_1 SELECT 1;
SELECT * FROM tbl_inh;
 id 
----
  1
(1 row)

SELECT * FROM ONLY tbl_inh;
 id 
----
(0 rows)

SELECT COUNT(*) FROM pg_stat_query_plans WHERE query LIKE '%FROM%tbl_inh%';
 count 
-------
     2
(1 row)

DROP TABLE tbl_inh CASCADE;
NOTICE:  drop cascades to table tbl_inh_1
-- WITH TIES
CREATE TABLE limitoption AS SELECT 0 AS val FROM generate_series(1, 10);
SELECT *
FROM limitoption
WHERE val < 2
ORDER BY val
FETCH FIRST 2 ROWS WITH TIES;
 val 
-----
   0
   0
   0
   0
   0
   0
   0
   0
   0
   0
(10 rows)

SELECT *
FROM limitoption
WHERE val < 2
ORDER BY val
FETCH FIRST 2 ROW ONLY;
 val 
-----
   0
   0
(2 rows)

SELECT COUNT(*) FROM pg_stat_query_plans WHERE query LIKE '%FETCH FIRST%';
 count 
-------
     2
(1 row)

DROP TABLE limitoption;
-- GROUP BY [DISTINCT]
SELECT a, b, c
FROM (VALUES (1, 2, 3), (4, NULL, 6), (7, 8, 9)) AS t (a, b, c)
GROUP BY ROLLUP(a, b), rollup(a, c)
ORDER BY a, b, c;
 a | b | c 
---+---+---
 1 | 2 | 3
 1 | 2 |  
 1 | 2 |  
 1 |   | 3
 1 |   | 3
 1 |   |  
 1 |   |  
 1 |   |  
 4 |   | 6
 4 |   | 6
 4 |   | 6
 4 |   |  
 4 |   |  
 4 |   |  
 4 |   |  
 4 |   |  
 7 | 8 | 9
 7 | 8 |  
 7 | 8 |  
 7 |   | 9
 7 |   | 9
 7 |   |  
 7 |   |  
 7 |   |  
   |   |  
(25 rows)

SELECT a, b, c
FROM (VALUES (1, 2, 3), (4, NULL, 6), (7, 8, 9)) AS t (a, b, c)
GROUP BY DISTINCT ROLLUP(a, b), rollup(a, c)
ORDER BY a, b, c;
 a | b | c 
---+---+---
 1 | 2 | 3
 1 | 2 |  
 1 |   | 3
 1 |   |  
 4 |   | 6
 4 |   | 6
 4 |   |  
 4 |   |  
 7 | 8 | 9
 7 | 8 |  
 7 |   | 9
 7 |   |  
   |   |  
(13 rows)

SELECT COUNT(*) FROM pg_stat_query_plans WHERE query LIKE '%GROUP BY%ROLLUP%';
 count 
-------
     2
(1 row)

-- GROUPING SET agglevelsup
SELECT (
  SELECT (
    SELECT GROUPING(a,b) FROM (VALUES (1)) v2(c)
  ) FROM (VALUES (1,2)) v1(a,b) GROUP BY (a,b)
) FROM (VALUES(6,7)) v3(e,f) GROUP BY ROLLUP(e,f);
 grouping 
----------
        0
        0
        0
(3 rows)

SELECT (
  SELECT (
    SELECT GROUPING(e,f) FROM (VALUES (1)) v2(c)
  ) FROM (VALUES (1,2)) v1(a,b) GROUP BY (a,b)
) FROM (VALUES(6,7)) v3(e,f) GROUP BY ROLLUP(e,f);
 grouping 
----------
        3
        0
        1
(3 rows)

SELECT COUNT(*) FROM pg_stat_query_plans WHERE query LIKE '%SELECT GROUPING%';
 count 
-------
     2
(1 row)

DROP EXTENSION pg_stat_query_plans;
